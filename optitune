/*
 Project Name: Optitune
Project Description: Optitune is a music visualiser which uses FFT to do a spectrum analysis of incoming
audio signal and displays the information on a Neopixel Ring.
Music signals can be represented as a sum of sine /cosine waves of multiple frequencies. Each component in music falls into different frequency 
spectrums. A fourier transform converts the incoming music signal which is a function of time to a fuction of frequencies. FFT is an algorithm used to perform 
a discrete fourier transform.
This code utilises the FIX_FFT library to perform the FFT on music signal recieved through a 3.5mm audio jack. The Arduino combines and averages the left and right audio channels 
using an analog pin. 8 values are read at a fixed interval and an FFT is performed on this array. The FFT returns two sets of values which corresponds to the 
real and imaginary parts of the FFT. The magnitude is calculated trom these two sets. This magnitude is mapped to the brightness of LEDs. Different fuctions are 
written to use these values to generate patterns. Each of these fuctions visualises the music in different ways and these fuctions are called randomly to create a 
dynamic visualisation.
 */
#include <Adafruit_NeoPixel.h>

#include <fix_fft.h>
//int data[]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
//int im[]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

char data[16];
char im[16];
int prev[8];
int brightness[8];
int red[]={148,75,0,0,255,255,255,255};
int green[]={0,0,0,255,255,127,75,0};
int blue[]={211,130,255,0,0,0,0,0};
int rando;
int rand_pick;
int beat=0;
int blink[]={0,0,0,0,0,0,0,0};
Adafruit_NeoPixel strip = Adafruit_NeoPixel(64, 2, NEO_GRB + NEO_KHZ800);

void setup()
{ strip.begin();
  strip.setBrightness(40); 
  strip.show();
  
}

void loop()
{ 
  uint16_t i, j, k;
  uint32_t color;
  
  
  for (i = 0; i < 16; i++)
  {
    int val = analogRead(A0)+analogRead(A1)+analogRead(A2);// combines data from the 3.5 mm audio jack. Not averaged because of low signal power
    //Serial.println(val);
    //Serial.println();
    data[i] = val ;
    im[i] = 0;
    
    delay(1);
  }

  int shift = fix_fft(data,im, 4, 0);// FFT is performed

  for (i = 0; i < 8; i++)
  {
   
    int fft_start = i * 2;
    int fft_count = 2;
    int curData = 0;
    for (k = 0; k < fft_count; k++)
      curData += sqrt(data[fft_start + k] * data[fft_start + k] + im[fft_start + k] * im[fft_start + k]);//calculating magnitude from real and imaginary parts
      prev[i] = curData;
       brightness[i]=map(prev[i],0,50,0,255);
  }
    rand_pick=random(1,8);// A random selector to cycle through various visualisation styles
   
    for(i=0;i<8;i++)
    {if(prev[i]>beat)beat=prev[i];
    if(prev[i]<8)
    blink[i]=0;
    else blink[i]=1;
    }
    beat=map(beat,0,60,1,8); 
     for(int i=0; i<8; i++) { 
      rando=random(-20,20);
       if(rand_pick<=2)// 25% chance of being called
       strip.setPixelColor(i, strip.Color(red[i],green[i],blue[i]));// pattern style #1
       else if(rand_pick<=5)//33.3% chance of being called
       {
       strip.setPixelColor(i, strip.Color(red[beat]*blink[i],green[beat]*blink[i],blue[beat]*blink[i]));// pattern style #2
      }
    else
    strip.setPixelColor(i, strip.Color(127+prev[i]*3*blink[i],75+prev[i]*4*blink[i],prev[i]*4*blink[i]));   // pattern style #3
    delay(60);
    strip.setBrightness(brightness[i]*blink[i]); 
    strip.show(); 
      }    

  for(i=0;i<8;i++)
  {Serial.print(prev[i]);
  Serial.print(", ");
  }
  Serial.println();
  delay(10);
  
}
  
